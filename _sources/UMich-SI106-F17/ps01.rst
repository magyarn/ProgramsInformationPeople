.. _problem_set_01:

Problem Set 1
-------------

**Instructions:** Write the code you want to save in the provided boxes, and click **Save & Run** for each one. That will  *run* your code, so you can see the output, if any, and the result of the tests, if there are any. It will also *save* your code. You should run your code each time you want to save it. You can then load the history of the code you have run and saved. The *last* code you have saved for each problem by the deadline is what will be graded.



.. activecode:: ps_01_01
    :language: python
    :autograde: unittest
    :hidecode:
    :practice: T
    :topics: Sequences/SplitandJoin

    **1.** Write code to assign the number of *characters* in the string ``rv`` to a variable ``num_chars``. Then write code to assign the number of *words* in the string ``rv`` to the variable ``num_words``. (Hint: remember how to split strings?)
    ~~~~
    rv = """Once upon a midnight dreary, while I pondered, weak and weary,
        Over many a quaint and curious volume of forgotten lore,
        While I nodded, nearly napping, suddenly there came a tapping,
        As of some one gently rapping, rapping at my chamber door.
        'Tis some visitor, I muttered, tapping at my chamber door;
        Only this and nothing more."""

    # Write your code here!

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(num_chars, len(rv), "Testing that num_chars has been set to the length of rv")
           self.assertEqual(num_words, len(rv.split()), "Testing that num_words has been set to the number of words in rv")

    myTests().main()


.. activecode:: ps_01_02
    :include: addl_functions
    :language: python
    :autograde: unittest
    :hidecode:
    :topics: SimplePythonData/FunctionCalls

    **2.** There is a function we are providing in for you in this problem set called ``square``. It takes one integer and returns the square of that integer value. Write code to assign a variable called ``xyz`` the value ``5*5`` (five squared). Use the square function, rather than just multiplying with ``*``.
    ~~~~
    xyz = ""

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertEqual(type(xyz), type(3), "Checking type of xyz")
            self.assertEqual(xyz, 25, "Checking if xyz is 25")
            self.assertIn('square', self.getEditorText(), "Testing that 'square' is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ps_01_03
    :language: python
    :hidecode:
    :topics: Sequences/SplitandJoin

    **3.** Write in a comment next to each line of code, saying what each line does. (You should be very specific! This exercise will train your brain for when you write more complicated code.)
    ~~~~
    course_A = 'SI 106, 4'
    course_B = 'SI 110, 4'

    split_cA = course_A.split(',')
    split_cB = course_B.split(',')

    cA_name = split_cA[0]
    cA_credits = int(split_cA[1])

    cB_name = split_cB[0]
    cB_credits = int(split_cB[1])

    print('Courses: ' + cA_name + ' and ' + cB_name)
    print('Credits: ' + str(cA_credits + cB_credits))


.. activecode:: ps_01_04
    :language: python
    :autograde: unittest
    :hidecode:
    :practice: T
    :topics: SimplePythonData/Input

    **4.**
    The following code asks the user to enter an integer. Write code that will assign two times the value that the user entered to the variable ``inp_times_2``.
    ~~~~
    user_inp = int(input('Enter an integer: '))
    # assign the value that the user entered multiplied by two to inp_times_2.

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
           self.assertEqual(type(inp_times_2), type(1), "Testing that inp_times_2's value is an integer")

    myTests().main()

.. activecode:: ps_01_05
    :language: python
    :autograde: unittest
    :hidecode:
    :practice: T
    :topics: SimplePythonData/Input

    **5.**
    The following code asks the user to enter two numbers. Write code that assigns the average of the two numbers that the user entered to the variable ``avg``.
    Hint: remember that ``input()`` always returns a string. Use ``float()`` to cast the value as a float.
    ~~~~
    first_num = input('Enter the first number: ')
    second_num = input('Enter the second number: ')
    # Assign the average of first_num and second_num to avg.

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(type(avg), type(1.5), "Testing that avg is a float")

    myTests().main()

.. activecode:: ps_01_06
    :include: addl_functions
    :language: python
    :autograde: unittest
    :hidecode:
    :topics: SimplePythonData/FunctionCalls

    **6.** There are a couple functions we're giving you in this problem set. One is a function called ``greeting``, which takes any string and adds ``"Hello, "`` in front of it. (You can see examples in the code.) Another one is a function called ``random_digit``, which returns any random integer between 0 and 9 (inclusive). (You can also see examples in the code.)

    Write code that assigns the **function** ``greeting`` (without executing the function) to the variable ``func_var``.

    Then, write code that assigns the **return value** from executing the function ``random_digit`` to the variable ``new_digit``.

    Then, write code that assigns the **function** ``random_digit`` (without executing the function) to the variable ``digit_func``.
    ~~~~
    # For example
    print(greeting("Jackie"))
    print(greeting("everybody"))
    print(greeting("sdgadgsal"))

    # Try running all this code more than once, so you can see how calling the function
    # random_digit works.
    print(random_digit())
    print(random_digit())

    # Write code that assigns the variables as mentioned in the instructions.


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(type(func_var), type(greeting), "Testing that func_var is same type as greeting")
        def testTwo(self):
           self.assertEqual(type(new_digit), type(1), "Testing that new_digit's value is an integer")
        def testThree(self):
           self.assertEqual(type(digit_func), type(random_digit), "Testing that digit_func is same type as random_digit")

    myTests().main()


.. activecode:: ps_01_07
    :include: addl_functions
    :language: python
    :hidecode:
    :topics: SimplePythonData/FunctionCalls

    **7.** There is a function we have defined that takes two strings as inputs, and returns the length of both of those strings added together. It's called called ``add_lengths``. We are also including the functions from Problem Set 1 called ``random_digit`` and ``square`` in this problem set.

    Next, **answer the following code and related questions, in this code window**.
    ~~~~
    new_str = "'Twas brillig"

    y = add_lengths("receipt","receive")

    x = random_digit()

    z = new_str.find('b')

    l = new_str.find("'")

    # notice that this line of code is made up of a lot of different expressions
    fin_value = square(len(new_str)) + (z - l) + (x * random_digit())

    # DO NOT CHANGE ANY CODE ABOVE THIS LINE
    # But below here, putting print statements and running the code may help you!

    # The following questions are based on that code. All refer to the types of the
    #variables and/or expressions after the above code is run.

    #####################

    # Write a comment explaining each of the following, after each question.
    # Don't forget to press **run** to save once you've done this!

    # What is square?

    # What type of object does the expression square(len(new_str)) evaluate to?

    # What type is z?

    # What type is l?

    # What type is the expression z-l?

    # What type is x?

    # What is random_digit? How many inputs does it take?

    # What type does the expression x * random_digit() evaluate to?

    # Given all this information, what type will fin_value hold once all this code is run?

    ====

    print("===========")
    print("\n\nThere are no tests for this problem")


.. activecode:: ps_01_08
    :language: python
    :autograde: unittest
    :hidecode:
    :practice: T
    :topics: Sequences/AccessingElements

    **8.** Assign the value of the third element of ``num_lst`` to a variable called ``third_elem``.

    Assign the value of the sixth element of ``num_lst`` to a variable called ``elem_sixth``.

    Assign the length of ``num_lst`` to a variable called ``num_lst_len``.

    Write code to print out the **type** of the third element of ``mixed_bag``.

    Write code to assign the **type** of the fifth element of ``mixed_bag`` to a variable called ``fifth_type``.

    Write code to assign the **type** of the first element of ``mixed_bag`` to a variable called ``another_type``.

    **Keep in mind:** All ordinal numbers in *instructions*, like "third" or "fifth" refer to the way HUMANS count. Remember that Python sequences are zero-indexed.
    ~~~~
    num_lst = [4,16,25,9,100,12,13]
    mixed_bag = ["hi", 4,6,8, 92.4, "see ya", "23", 23]

    # Write your code here:


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(third_elem, num_lst[2], "Testing that third_elem has been set to the third element of num_lst")
        def testTwo(self):
           self.assertEqual(elem_sixth, num_lst[5], "Testing that elem_sixth has been set to the sixth element of num_lst")
        def testThree(self):
           self.assertEqual(num_lst_len,len(num_lst), "Testing that num_len has been set to the length of num_lst")
        def testFour(self):
           self.assertEqual(fifth_type, type(mixed_bag[4]), "Testing that fifth_type has been set to the type of the fifth element in mixed_bag")
        def testFive(self):
           self.assertEqual(another_type, type(mixed_bag[0]), "Testing that another_type has been set to the type of the first element of mixed_bag")
        def testSix(self):
           self.assertIn('print', self.getEditorText(), "Testing that 'print' is in your code. (Don't worry about Actual and Expected Values.)")
        def testSeven(self):
           self.assertIn('int', self.getOutput(), "Testing that you printed the correct element of mixed_bag. (Don't worry about Actual and Expected Values.)")


    myTests().main()


.. activecode:: ps_01_09
    :language: python
    :hidecode:
    :topics: PythonTurtle/OurFirstTurtleProgram

    **9.** Write a program that uses the turtle module to draw something. It doesn't have to be complicated, but draw something different than we did in the textbook or in class. (Optional but encouraged: post a screenshot of the artistic outcome to the Facebook group, or a short video of the drawing as it is created.) (Hint: if you are drawing something complicated, it could get tedious to watch it draw over and over. Try setting ``.speed(10)`` for the turtle to draw fast, or ``.speed(0)`` for it to draw super fast with no animation.)
    ~~~~
    import turtle


.. activecode:: ps_01_10
    :language: python

    **10.** Write code and/or a python comment that demonstrates your understanding of the material in this problem set. Be sure to click "Run" even if it's just a comment, because that's what will save it so that we can grade it. This assignment requires effort and demonstration of true understanding and will be evaluated carefully (this does not mean it needs to be long, just clear and accurate. In fact, it should be brief; ideally just 2-3 sentences!).

    Your submission must be your own work (i.e., don't collaborate with other students on this problem even if you've been collaborating with them on the rest of the problems), and you must credit any resources you reference (you do not need to reference any).

    After grading, you will receive a response, in a comment, from an instructor, which will be visible on this assignment page. If you do not receive full credit for this problem, you may initiate a conversation with your GSI by adding a comment *on Canvas* on the graded assignment. If you want to update code here and refer to it in your Canvas comment, you can do that. There may be several rounds of comments and responses on Canvas before the GSI is satisfied that you have demonstrated a correct understanding. You must respond to the GSI within 48 hours in order for that conversation to remain "open". When the GSI is satisfied, they will update your grade accordingly.

    ~~~~

.. activecode:: addl_functions
    :language: python
    :nopre:
    :hidecode:

    (This is not a problem set question) The code below defines functions used by several questions. Do not modify them, but feel free to take a look.

    ~~~~

    def square(num):
        return num**2

    def greeting(st):
        st = str(st) # just in case
        return "Hello, " + st

    def random_digit():
        import random
        return random.choice([0,1,2,3,4,5,6,7,8,9])

    def add_lengths(str1, str2):
        return len(str1) + len(str2)
