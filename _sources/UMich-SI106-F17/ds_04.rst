.. _discussion_section_04:

Week 4 Discussion Section
-------------------------

.. activecode:: ds_04_01
    :language: python
    :autograde: unittest
    :hidecode:

    **1.** The code below creates a random number between 1 and 10 and then asks the user to guess the number. Write code that will give the user feedback on their guess:

    - If ``userGuess`` is smaller than ``randNum``, print ``"too low"``
    - If ``userGuess`` is larger than ``randNum``, print ``"too high"``
    - If ``userGuess`` is equal to ``randNum``, print ``"correct!"``

    You should use ``if``, ``elif``, and ``else``.

    ~~~~
    import random # Allows us to use the "random" module
    randNum = random.randint(1,10) # Creates a random number between 1 and 10
    userGuess = int(input("Guess the random number: ")) # Ask the user to enter their guess
    # do not alter the code above

    # if they guesed UNDER,     print "too low"
    # if they guesed OVER,      print "too high"
    # if they guesed CORRECTLY, print "correct!"

    # do not alter the code below
    if userGuess != randNum:
        print("The correct answer was " + str(randNum))
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn('if', self.getEditorText(), "Testing that you used an if (Don't worry about actual and expected values).")
            self.assertIn('elif', self.getEditorText(), "Testing that you used an elif (Don't worry about actual and expected values).")
            self.assertIn('else', self.getEditorText(), "Testing that you used an else (Don't worry about actual and expected values).")

            if(userGuess == randNum): correctFeedback = "correct!"
            elif(userGuess < randNum): correctFeedback = "too low"
            else: correctFeedback = "too high"

            self.assertIn(correctFeedback, self.getOutput(), "Testing that your code gave the user the correct feedback.")

    myTests().main()

.. activecode:: ds_04_02
    :language: python
    :autograde: unittest
    :hidecode:

    **2.** Write code that counts the number of a's in ``word`` and store the result in the variable ``a_count``.

    ~~~~
    word = 'supercalifragilisticexpialidocious'
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn('for', self.getEditorText(), "Testing that you used a for loop (Don't worry about actual and expected values).")
            self.assertEqual(a_count, 3, "Testing that a_count has been set to the correct value.")

    myTests().main()

.. activecode:: ds_04_03
    :language: python
    :autograde: unittest
    :hidecode:

    **3.** The variable ``sentence`` stores a string.Write code to determine the number of words that contain the letter "c". Store the result in ``num_words_with_c``.
    ~~~~
    sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"

    # Write your code here.

    ====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn('for', self.getEditorText(), "Testing that you used a for loop (Don't worry about actual and expected values).")
            self.assertEqual(num_words_with_c, 4, "Testing that num_words_with_c has been set to the correct value.")

    myTests().main()


.. activecode:: ds_04_04
    :language: python
    :autograde: unittest
    :hidecode:

    **4.** The variable ``sentence`` stores a string. Write code to determine the number of words that contain the letter "c" **or** are more than 5 characters long. Store the result in ``c_or_long``.
    ~~~~
    sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"

    # Write your code here.

    ====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(c_or_long, 8, "Testing that c_or_long has been set to the correct value.")

    myTests().main()


.. activecode:: ds_04_04a
    :language: python
    :autograde: unittest
    :hidecode:

    **Indefinite Iteration** Write code that asks the user for input repeatedly, as long as the user enters an odd number, and adds them all up. It should stop when the user first enters an even number, and not include that in the sum.
    ~~~~
    # Write your code here.

    # Write your plan in English.

    # Then write our code.



    ====

    print("There are no automated tests for this question.")


.. activecode:: ds_04_05
    :language: python
    :autograde: unittest
    :hidecode:

    **5.** Below is a dictionary ``diction`` with two key-value pairs inside it. The string ``"python"`` is one of its keys. Using dictionary mechanics, print out the value of the key ``"python"``.

    ~~~~
    diction = {"python":"you are awesome","autumn":100}

    # Write your code here.

    ====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn('you are awesome', self.getOutput(), "Testing your code (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ds_04_06
    :language: python
    :autograde: unittest
    :hidecode:

    **6.** Here's a dictionary, ``d``.


    **PART 1**
    Write code to print out each key-value pair in it, one key and its value on each line. Your output should look somewhat like this (remember, the order may be different!):

    ::

        autumn spring
        4 seasons
        23 345
        well spring

    **PART 2**
    Then, write code to increase the value of key ``"23"`` by 5.

    **PART 3**
    Finally, write code to print the value of the key ``"well"``. Your code should work no matter what the value of the key "well" is.

    **HINTS:**
    - Printing things with a comma, e.g. ``print("hello", "everyone")`` will print out those things on the same line with  a space in between them: ``hello everyone``.
    - Your code should work no matter what the values corresponding to the keys are!

    ~~~~
    d = {"autumn":"spring", "well":"spring", "4":"seasons","23":345}
    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(d["23"], 350, "Testing that the value associated with the key '23' is 350")
            self.assertIn("autumn spring", self.getOutput(), "Testing output (Don't worry about actual and expected values).")
            self.assertIn("well spring", self.getOutput(), "Testing output (Don't worry about actual and expected values).")
            self.assertIn("4 seasons", self.getOutput(), "Testing output (Don't worry about actual and expected values).")
            self.assertIn("23 345", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ds_04_07
    :language: python
    :autograde: unittest
    :hidecode:

    **7.** Below is an empty dictionary saved in the variable ``nums``, and a list saved in the variable ``num_words``. Use iteration and dictionary mechanics to add each element of ``num_words`` as a key in the dictionary ``nums``. Each key should have the value ``0``. The dictionary should end up looking something like this when you print it out (remember, you can't be sure of the order): ``{"two":0,"three":0,"four":0,"eight":0,"seventeen":0,"not_a_number":0}``
    ~~~~
    nums = {}
    num_words = ["two","three","four","seventeen","eight","not_a_number"]
    # Write your code here.

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertEqual(nums["two"], 0, "Testing that the key 'two' has been assigned the value of 0.")
            self.assertEqual(type(nums["seventeen"]), type(3), "Testing that the key 'seventeen' has been assigned a value whose type is an integer.")
            self.assertEqual(sorted(nums), sorted({"two": 0, "three": 0, "four": 0, "eight": 0, "seventeen": 0, "not_a_number": 0}), "Testing that the contents of nums is accurate.")

        def testOneA(self):
            self.assertIn('for', self.getEditorText(), "Testing that there is a for inside your code (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ds_04_08
    :language: python
    :autograde: unittest
    :hidecode:

    **8.** Suppose the dictionary ``golds`` maps countries to the number of gold medals they won in the 2016 olympics. Write code to store the names of countries that won more than 20 gold medals into the variable ``gold20``.
    ~~~~
    golds = {"Italy": 12, "USA": 33, "Brazil": 15, "China": 27, "Spain": 19, "Canada": 22, "Argentina": 8, "England": 29}

    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(sorted(gold20),sorted(['USA', 'China', 'Canada', 'England']) , "Testing that gold20 has been created correctly.")

    myTests().main()


.. activecode:: ds_04_09
    :language: python
    :autograde: unittest
    :hidecode:

    **9.** Suppose the dictionary ``golds`` maps countries to the number of gold medals they won in the 2016 olympics. Write code to compute the name of the country that won the most gold medals. Store the result in the variable ``most_golds``
    ~~~~
    golds = {"Italy": 12, "USA": 33, "Brazil": 15, "China": 27, "Spain": 19, "Canada": 22, "Argentina": 8, "England": 29}

    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(most_golds, "USA", "Testing that most_golds has been set correctly.")

    myTests().main()
