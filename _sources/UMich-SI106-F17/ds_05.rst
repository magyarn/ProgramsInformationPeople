.. _discussion_section_05:

Week 5 Discussion Section
-------------------------

.. activecode:: ds_05_01
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **1.** Create a dictionary named ``letter_counts`` that contains each letter and the number of times it occurs in ``string1``.
   ~~~~
   string1 = "there is a tide in the affairs of men, which taken at the flood, leads on to fortune. omitted, all the voyage of their life is bound in shallows and in miseries. on such a full sea are we now afloat. and we must take the current when it serves, or lose our ventures."

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

      def testOne(self):
         self.assertEqual(letter_counts['t'], 19, "Testing that the letter 't' has the correct value.")

      def testTwo(self):
         self.assertEqual(letter_counts['w'], 6, "Testing that the letter 'w' has the correct value.")

      def testThree(self):
         self.assertEqual(letter_counts['o'], 17, "Testing that the letter 'o' has the correct value.")

      def testFour(self):
         self.assertEqual(letter_counts['a'], 17, "Testing that the letter 'a' has the correct value.")

   myTests().main()

.. activecode:: ds_05_08
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **2.** Define a function called ``timesTwo`` that takes one integer as input and returns that integer multiplied by 2.
   ~~~~
   # We've started you off with the first line...
   def timesTwo(num_here):
       pass # delete this line and put in your own code for the body of the function.

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

      def testOne(self):
         self.assertEqual(timesTwo(0), 0, "Testing if timesTwo(0) equals 0")
         self.assertEqual(timesTwo(-10), -20, "Testing if timesTwo(-10) equals -20")
         self.assertEqual(timesTwo(12), 24, "Testing if timesTwo(12) equals 24")

   myTests().main()


.. activecode:: ds_05_09
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **3.** Write a function, ``lengthStr``, that takes in a list as the input. If the length of the list is greater than or equal to 5, return "Longer than 5". If the length is less than 5, return "Less than 5".

   ~~~~

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

      def testFive(self):
         self.assertEqual(lengthStr([]), "Less than 5", "Tests that lengthStr([]) returns 'Less than 5'")
         self.assertEqual(lengthStr([2, 2]), "Less than 5", "Tests that lengthStr([2, 2]) returns 'Less than 5'")
         self.assertEqual(lengthStr([4, 4, 4, 3, 5, 6, 7, 8, 9]), "Longer than 5", "Tests that lengthStr([4, 4, 4, 3, 5, 6, 7, 8, 9]) returns 'Less than 5'")
         self.assertEqual(lengthStr([1, 1, 1, 1, 1]), "Longer than 5", "Tests that lengthStr([1, 1, 1, 1, 1]) returns 'Longer than 5'")

   myTests().main()


.. activecode:: ds_05_10
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **4.** Define a function ``numWords`` that accepts a string as an argument and returns the number of words in that string.

   ~~~~

   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
      def testOne(self):
         self.assertEqual(numWords(''), 0, "Testing numWords for an empty string")
         self.assertEqual(numWords('hello'), 1, "Testing numWords for an one-word string")
         self.assertEqual(numWords('this is a sentence.'), 4, "Testing numWords for an four-word string")
   myTests().main()

.. activecode:: ds_05_11
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **5.** Define a function ``longestWord`` that accepts a string as an argument and returns the longest word in that string (the word itself; not its length).

   ~~~~
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
      def testOne(self):
         self.assertEqual(longestWord('x'), 'x', "Testing longestWord for a one-word string")
         self.assertEqual(longestWord('this is a sentence'), 'sentence', "Testing longestWord for a four-word string")
   myTests().main()


.. activecode:: ds_05_12
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **6.** Define a function ``mostCommonWord`` that accepts a string as an argument and returns the word that appears the most frequently in that string (the word itself; not its frequency).

   ~~~~
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
      def testOne(self):
         self.assertEqual(mostCommonWord('x'), 'x', "testing mostCommonWord with a one-word sentence")
         self.assertEqual(mostCommonWord('x y y z'), 'y', "testing mostCommonWord with a four-word sentence")
         self.assertEqual(mostCommonWord('this is a a a sentence'), 'a', "testing mostCommonWord with a sentence")
   myTests().main()

.. activecode:: ds_05_02
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **7.** The string ``state_data`` contains a specially formatted string that contains population information for various states. Every state is on a different line. There are four "columns": state name, abbreviation, region, and population. Every column is separated by a comma. Use a ``for`` loop to loop through every line of ``state_data`` and print out each line.


   Hint: use ``.split('\n')`` to split the lines of ``state_data`` into a list.
   ~~~~
   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population

   state_data = """Alabama,         AL,     South,   4849377
      Alaska,          AK,      West,    736732
      Arizona,         AZ,      West,   6731484
      Arkansas,        AR,     South,   2966369
      California,      CA,      West,  38802500
      Colorado,        CO,      West,   5355866
      Connecticut,     CT, Northeast,   3596677
      Delaware,        DE,     South,    935614
      Florida,         FL,     South,  19893297
      Georgia,         GA,     South,  10097343
      Hawaii,          HI,      West,   1419561
      Idaho,           ID,      West,   1634464
      Illinois,        IL,   Midwest,  12880580
      Indiana,         IN,   Midwest,   6596855
      Iowa,            IA,   Midwest,   3107126
      Kansas,          KS,   Midwest,   2904021
      Kentucky,        KY,     South,   4413457
      Louisiana,       LA,     South,   4649676
      Maine,           ME, Northeast,   1330089
      Maryland,        MD,     South,   5976407
      Massachusetts,   MA, Northeast,   6745408
      Michigan,        MI,   Midwest,   9909877
      Minnesota,       MN,   Midwest,   5457173
      Mississippi,     MS,     South,   2994079
      Missouri,        MO,   Midwest,   6063589
      Montana,         MT,      West,   1023579
      Nebraska,        NE,   Midwest,   1881503
      Nevada,          NV,      West,   2839099
      New Hampshire,   NH, Northeast,   1326813
      New Jersey,      NJ, Northeast,   8938175
      New Mexico,      NM,      West,   2085572
      New York,        NY, Northeast,  19746227
      North Carolina,  NC,     South,   9943964
      North Dakota,    ND,   Midwest,    739482
      Ohio,            OH,   Midwest,  11594163
      Oklahoma,        OK,     South,   3878051
      Oregon,          OR,      West,   3970239
      Pennsylvania,    PA, Northeast,  12787209
      Rhode Island,    RI, Northeast,   1055173
      South Carolina,  SC,     South,   4832482
      South Dakota,    SD,   Midwest,    853175
      Tennessee,       TN,     South,   6549352
      Texas,           TX,     South,  26956958
      Utah,            UT,      West,   2942902
      Vermont,         VT, Northeast,    626562
      Virginia,        VA,     South,   8326289
      Washington,      WA,      West,   7061530
      West Virginia,   WV,     South,   1850326
      Wisconsin,       WI,   Midwest,   5757564
      Wyoming,         WY,      West,    584153"""

   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population
   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
      def testOne(self):
         self.assertIn("Michigan,        MI,   Midwest,   9909877", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

      def testOneA(self):
         self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

   myTests().main()


.. activecode:: ds_05_03
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **8.** We have ``state_data`` from before, but this time for every state, only print the state abbreviation (for example, **MI** for Michigan). You may use your code from the previous problem. Your output should contain "AL" on one line, "AK" on the next, etc.

   Hint: use ``.split(',')`` to split a given line of ``state_data`` by commas. You may use ``.strip()`` on any string to remove left and right whitespace.
   ~~~~
   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population

   state_data = """Alabama,         AL,     South,   4849377
      Alaska,          AK,      West,    736732
      Arizona,         AZ,      West,   6731484
      Arkansas,        AR,     South,   2966369
      California,      CA,      West,  38802500
      Colorado,        CO,      West,   5355866
      Connecticut,     CT, Northeast,   3596677
      Delaware,        DE,     South,    935614
      Florida,         FL,     South,  19893297
      Georgia,         GA,     South,  10097343
      Hawaii,          HI,      West,   1419561
      Idaho,           ID,      West,   1634464
      Illinois,        IL,   Midwest,  12880580
      Indiana,         IN,   Midwest,   6596855
      Iowa,            IA,   Midwest,   3107126
      Kansas,          KS,   Midwest,   2904021
      Kentucky,        KY,     South,   4413457
      Louisiana,       LA,     South,   4649676
      Maine,           ME, Northeast,   1330089
      Maryland,        MD,     South,   5976407
      Massachusetts,   MA, Northeast,   6745408
      Michigan,        MI,   Midwest,   9909877
      Minnesota,       MN,   Midwest,   5457173
      Mississippi,     MS,     South,   2994079
      Missouri,        MO,   Midwest,   6063589
      Montana,         MT,      West,   1023579
      Nebraska,        NE,   Midwest,   1881503
      Nevada,          NV,      West,   2839099
      New Hampshire,   NH, Northeast,   1326813
      New Jersey,      NJ, Northeast,   8938175
      New Mexico,      NM,      West,   2085572
      New York,        NY, Northeast,  19746227
      North Carolina,  NC,     South,   9943964
      North Dakota,    ND,   Midwest,    739482
      Ohio,            OH,   Midwest,  11594163
      Oklahoma,        OK,     South,   3878051
      Oregon,          OR,      West,   3970239
      Pennsylvania,    PA, Northeast,  12787209
      Rhode Island,    RI, Northeast,   1055173
      South Carolina,  SC,     South,   4832482
      South Dakota,    SD,   Midwest,    853175
      Tennessee,       TN,     South,   6549352
      Texas,           TX,     South,  26956958
      Utah,            UT,      West,   2942902
      Vermont,         VT, Northeast,    626562
      Virginia,        VA,     South,   8326289
      Washington,      WA,      West,   7061530
      West Virginia,   WV,     South,   1850326
      Wisconsin,       WI,   Midwest,   5757564
      Wyoming,         WY,      West,    584153"""

   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
      def testOne(self):
         self.assertIn("MI\n", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

      def testOneA(self):
         self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

   myTests().main()


.. activecode:: ds_05_04
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **9.** We have ``state_data`` from before. This time, create a **dictionary** called ``state_abbreviations`` that maps state abbreviations to their names. For example, ``"MI"`` should be mapped to ``"Michigan"``.
   ~~~~
   state_data = """Alabama,AL,South,4849377
   Alaska,AK,West,736732
   Arizona,AZ,West,6731484
   Arkansas,AR,South,2966369
   California,CA,West,38802500
   Colorado,CO,West,5355866
   Connecticut,CT,Northeast,3596677
   Delaware,DE,South,935614
   Florida,FL,South,19893297
   Georgia,GA,South,10097343
   Hawaii,HI,West,1419561
   Idaho,ID,West,1634464
   Illinois,IL,Midwest,12880580
   Indiana,IN,Midwest,6596855
   Iowa,IA,Midwest,3107126
   Kansas,KS,Midwest,2904021
   Kentucky,KY,South,4413457
   Louisiana,LA,South,4649676
   Maine,ME,Northeast,1330089
   Maryland,MD,South,5976407
   Massachusetts,MA,Northeast,6745408
   Michigan,MI,Midwest,9909877
   Minnesota,MN,Midwest,5457173
   Mississippi,MS,South,2994079
   Missouri,MO,Midwest,6063589
   Montana,MT,West,1023579
   Nebraska,NE,Midwest,1881503
   Nevada,NV,West,2839099
   New Hampshire,NH,Northeast,1326813
   New Jersey,NJ,Northeast,8938175
   New Mexico,NM,West,2085572
   New York,NY,Northeast,19746227
   North Carolina,NC,South,9943964
   North Dakota,ND,Midwest,739482
   Ohio,OH,Midwest,11594163
   Oklahoma,OK,South,3878051
   Oregon,OR,West,3970239
   Pennsylvania,PA,Northeast,12787209
   Rhode Island,RI,Northeast,1055173
   South Carolina,SC,South,4832482
   South Dakota,SD,Midwest,853175
   Tennessee,TN,South,6549352
   Texas,TX,South,26956958
   Utah,UT,West,2942902
   Vermont,VT,Northeast,626562
   Virginia,VA,South,8326289
   Washington,WA,West,7061530
   West Virginia,WV,South,1850326
   Wisconsin,WI,Midwest,5757564
   Wyoming,WY,West,584153"""

   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population

   state_abbreviations = {}
   for line in state_data.split('\n'):
       cells = line.split(',')

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
       def testOne(self):
           self.assertEqual(state_abbreviations['MI'], "Michigan", "Testing MI abbreviation")
           self.assertEqual(state_abbreviations['PA'], "Pennsylvania", "Testing PA abbreviation")
           self.assertEqual(state_abbreviations['MA'], "Massachusetts", "Testing MA abbreviation")
           self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

   myTests().main()



.. activecode:: ds_05_06
   :language: python
   :autograde: unittest
   :hidecode:
   :chatcodes:

   **10.** We have ``state_data`` from before. This time, use **dictionary accumulation** to create a dictionary called ``region_pop`` that maps *regions* (e.g. Midwest) to the total population for that region. Then, use the max accumulation pattern to find the **most** populous region and store it in ``high_region_pop``.

   Hint: Use ``int()`` to cast strings to integers.
   ~~~~
   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population

   state_data = """Alabama,AL,South,4849377
   Alaska,AK,West,736732
   Arizona,AZ,West,6731484
   Arkansas,AR,South,2966369
   California,CA,West,38802500
   Colorado,CO,West,5355866
   Connecticut,CT,Northeast,3596677
   Delaware,DE,South,935614
   Florida,FL,South,19893297
   Georgia,GA,South,10097343
   Hawaii,HI,West,1419561
   Idaho,ID,West,1634464
   Illinois,IL,Midwest,12880580
   Indiana,IN,Midwest,6596855
   Iowa,IA,Midwest,3107126
   Kansas,KS,Midwest,2904021
   Kentucky,KY,South,4413457
   Louisiana,LA,South,4649676
   Maine,ME,Northeast,1330089
   Maryland,MD,South,5976407
   Massachusetts,MA,Northeast,6745408
   Michigan,MI,Midwest,9909877
   Minnesota,MN,Midwest,5457173
   Mississippi,MS,South,2994079
   Missouri,MO,Midwest,6063589
   Montana,MT,West,1023579
   Nebraska,NE,Midwest,1881503
   Nevada,NV,West,2839099
   New Hampshire,NH,Northeast,1326813
   New Jersey,NJ,Northeast,8938175
   New Mexico,NM,West,2085572
   New York,NY,Northeast,19746227
   North Carolina,NC,South,9943964
   North Dakota,ND,Midwest,739482
   Ohio,OH,Midwest,11594163
   Oklahoma,OK,South,3878051
   Oregon,OR,West,3970239
   Pennsylvania,PA,Northeast,12787209
   Rhode Island,RI,Northeast,1055173
   South Carolina,SC,South,4832482
   South Dakota,SD,Midwest,853175
   Tennessee,TN,South,6549352
   Texas,TX,South,26956958
   Utah,UT,West,2942902
   Vermont,VT,Northeast,626562
   Virginia,VA,South,8326289
   Washington,WA,West,7061530
   West Virginia,WV,South,1850326
   Wisconsin,WI,Midwest,5757564
   Wyoming,WY,West,584153"""

   # COLUMNS:
   # 0: state name
   # 1: state abbreviation
   # 2: region
   # 3: population

   region_pop = {}

   for line in state_data.split('\n'):
       cells = line.split(',')

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
       def testOne(self):
           answer = {'South': 119113041, 'West': 75187681, 'Northeast': 56152333, 'Midwest': 67745108}
           self.assertEqual(sorted(region_pop.values()), sorted(answer.values()), "Checking values")
           self.assertEqual(sorted(region_pop.keys()), sorted(answer.keys()), "Checking values")
           self.assertEqual(high_region_pop, "South", "Checking high_region_pop")
           self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

   myTests().main()

