.. _discussion_section_06:

Week 6 Discussion Section
-------------------------

.. activecode:: ds_06_01
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **1.** Define a function called ``circle_metrics`` whose input is a float representing a circle's radius, ``r``. Your function should return a tuple where the first item represents the circle's circumference (computed by ``2*pi*r``) and whose second item represents the circle's area (computed by ``pi*r*r``).

    ~~~~
    pi = 3.141592653589793

    def circle_metrics(r):
        # Write your code here
        print(r)

    circumference, area = circle_metrics(10)

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            c,a = circle_metrics(100)
            self.assertTrue(abs(c-2*pi*100) < 0.0001, "Testing for example input")
            self.assertTrue(abs(a-pi*(100*100)) < 0.0001, "Testing for example input")

    myTests().main()

.. activecode:: ds_06_02
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **2.** Define a function ``trimWords`` that accepts one required argument, ``s`` and two optional integer arguments: ``fromStart`` (default: ``1``) and ``fromEnd`` (default: ``1``). ``trimWords`` should return a new string where *every word* of ``s`` removes ``fromStart`` characters from the start of the word and ``fromEnd`` characters from the end of the word. Note that words whose length is *less than or equal to* ``fromStart+fromEnd`` should be filtered out.

    For example: ``trimWords('this is a sentence', fromStart=1, fromEnd=1)`` should yield ``'hi entenc'``

    Hint: Using ``' '.join()`` and a list comprehension, the body of ``trimWords`` could be just one line


    ~~~~


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(trimWords('hello my world'), 'ell orl')
            self.assertEqual(trimWords('this is a sentence', fromStart=0, fromEnd=1), 'thi i sentenc')
            self.assertEqual(trimWords('', fromStart=10, fromEnd=10), '')
            self.assertEqual(trimWords('this is a sentence', fromStart=3, fromEnd=2), 'ten')
    myTests().main()


.. activecode:: ds_06_03
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **3.** Define a function ``convert_nums``. The function should accept an integer as input, representing a number of hours. It should return a tuple of that number converted to minutes (* 60), and then that number converted to seconds (* 3600). For example, if ``1`` were input into the function, the return value of that invocation should be the tuple ``60, 3600``.

    ~~~~
    # your definition of convert_nums


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(convert_nums(1),(60,3600),"incorrect output of function with input 1")
            self.assertEqual(convert_nums(50),(60*50,3600*50), "incorrect output of function with input 50")
            self.assertEqual(convert_nums(0), (0,0), "incorrect output of function with input 0")
    myTests().main()

.. activecode:: ds_06_04
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **4.** Define a function called ``my_map`` that accepts two arguments: a list ``L`` and a function ``fn``. Your function should "map" ``fn`` onto ``L``, meaning that it should call ``fn`` on each individual element of ``L`` and return a list whose values are ``fn`` called on each element.

    In other words, given a list ``L == [{a},{b},{c}, ... {z}]``, ``my_map(fn,L)`` should return ``[fn({a}), fn({b}), fn({c}), ... fn({z})]``.

    ~~~~
    def my_map(fn, l):
        pass

    print(my_map(lambda x: x*2, [1,2,3])) # should be [2,4,6]
    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            self.assertEqual(my_map(lambda x: x, [1,2,3]), [1,2,3], "Example input")
            self.assertEqual(my_map(lambda x: x, []), [], "Example input")
            self.assertEqual(my_map(lambda x: x*5, [10, 20]), [50, 100], "Example input")
            self.assertEqual(my_map(lambda c: c+'x', ["A", "B"]), ["Ax", "Bx"], "Example input")

    myTests().main()

.. activecode:: ds_06_05
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **5.** We have provided a nested list in the variable ``nl``. Use a list comprehension to accumulate a list containing the second (as humans count) element of each sub-list and save it in a variable ``second_elems``.

    ~~~~
    nl = [["nested","data","is"],["really","fun"],[11,["hooray","hooray"],"yay"]]


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(second_elems, ['data', 'fun', ['hooray', 'hooray']], "second_elems does not have the correct value")
    myTests().main()

.. activecode:: ds_06_06
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **6.** Define a function ``onlyEvenWords`` that accepts a string and **uses list comprehension** and ``join`` to return a new string that only contains words where the length of the word is even. The body of ``onlyEvenWords`` should only be 2 lines or fewer.


    ~~~~
    def onlyEvenWords(s):
        # your definition of onlyEvenWords
        pass


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(onlyEvenWords('this is an example of a sentence'), 'this is an of sentence')
            self.assertEqual(onlyEvenWords('s by sw'), 'by sw')
            self.assertEqual(onlyEvenWords('x'), '')
            self.assertEqual(onlyEvenWords(''), '')
    myTests().main()
