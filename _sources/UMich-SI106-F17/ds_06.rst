.. _discussion_section_06:

Week 6 Discussion Section
-------------------------

.. activecode:: ds_06_01
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **1.** Define a function called `safe_double` that accepts a list and returns a list where every item is doubled.

    ~~~~

    L = [1,2,3]
    print(safe_double(L))   # prints [2,4,6]
    print(L)                # prints [1,2,3]
    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            L2 = [3, 4]
            res = safe_double(L2)
            self.assertEqual(res, [6, 8], "Testing for doubling [3, 4]")
            self.assertEqual(L2, [3, 4], "Testing to make sure original list not changed")

    myTests().main()

.. activecode:: ds_06_02
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **2.** Define a function called `mutating_double` that accepts a list, destructively modifies the list so that each item is doubled, and returns the value None.

    ~~~~


    L = [1,2,3]
    mutating_double(L)  # returns None
    print(L)            # prints [2,4,6] (L changed)
    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            L2 = [3, 4]
            res = mutating_double(L2)
            self.assertEqual(res, None, "Testing return value")
            self.assertEqual(L2, [6, 8], "Testing to make sure original list is changed")

    myTests().main()


.. activecode:: ds_06_03
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **3.** Define a function called add_values whose input is two integers, whose default parameter values are the integers 1 and 2. The functionâ€™s return value should be the two input integers added together.

    ~~~~

    # Define your function here...

    print(add_values(3, 4)) # --> 7
    print(add_values(3))    # --> 5
    print(add_values())     # --> 3
    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            self.assertEqual(add_values(3, 4), 7, "Testing add_values(3, 4)")
            self.assertEqual(add_values(3), 5, "Testing add_values(3)")
            self.assertEqual(add_values(), 3, "Testing add_values()")

    myTests().main()


.. activecode:: ds_06_04
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **4.** Define a function called topThree that accepts a list of integers (lst_of_ints) and returns the three largest integers in that list, largest one first

    ~~~~

    # Define your function here...

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            self.assertEqual(topThree([1, 9, 7, 3, 6]), [9, 7, 6], "topThree([1, 9, 7, 3, 6])")

    myTests().main()


.. activecode:: ds_06_05
    :language: python
    :autograde: unittest
    :chatcodes:
    :hidecode:

    **5.** Write a function called topThreeLen that accepts a list of strings (lst_of_strings) and returns the three longest strings, longest one first:

    ~~~~

    # Define your function here...

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testCode(self):
            self.assertEqual(topThreeLen(['a', 'bbbbbbbbb', 'ccccccc', 'ddd', 'eeeeee']), ['bbbbbbbbb', 'ccccccc', 'eeeeee'], "topThreeLen(['a', 'bbbbbbbbb', 'ccccccc', 'ddd', 'eeeeee'])")

    myTests().main()

